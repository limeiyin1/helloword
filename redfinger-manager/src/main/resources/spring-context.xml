<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:task="http://www.springframework.org/schema/task"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
">

	<description>Spring Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:/system.properties" />
	
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
       <property name="locations">  
           <list>  
               <value>classpath:system.properties</value>  
           </list>  
       </property>  
    </bean>

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解,在SpringMvc中只扫描@Controller注解。-->
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.redfinger" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	
	<bean id="propertyConfigurerWeb" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="localOverride" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />  
		<property name="fileEncoding" value="utf-8"/>
		<property name="placeholderPrefix" value="$W{" />
		<property name="placeholderSuffix" value="}" />
		<property name="locations">
			<list>
				<value>classpath:filters/sms-conf.properties</value>
				<value>classpath:filters/UMeng-conf.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="smsUtil" class="com.redfinger.manager.common.sms.SmsUtils">
		<property name="smsType" value="$W{sms.type}" />
	
    	<property name="smsMovekUrl" value="$W{sms.movek.url}" />
    	<property name="smsMovekUserId" value="$W{sms.movek.userid}" />
    	<property name="smsMovekAccount" value="$W{sms.movek.account}" />
    	<property name="smsMovekPassword" value="$W{sms.movek.password}" />
    	
    	<property name="sms5cUrl" value="$W{sms.5c.url}" />
    	<property name="sms5cApikey" value="$W{sms.5c.apikey}" />
    	<property name="sms5cUsername" value="$W{sms.5c.username}" />
    	<property name="sms5cPassword" value="$W{sms.5c.password}" />
    	
    	<property name="smsHxUserId" value="$W{sms.hx.userid}" />
    	<property name="smsHxUrl" value="$W{sms.hx.url}" />
    	<property name="smsHxPassword" value="$W{sms.hx.password}" />
    	<property name="smsHxAccount" value="$W{sms.hx.account}" />
    	
    </bean>
    
    <bean id="uMengUtils" class="com.redfinger.manager.common.base.UMengUtils">
		<property name="userAgent" value="$W{UMeng.user.agent}" />
		<property name="host" value="$W{UMeng.host}" />
		<property name="fileHost" value="$W{UMeng.file.host}" />
    	<property name="appkey" value="$W{UMeng.appkey}" />
    	<property name="appMasterSecret" value="$W{UMeng.appMasterSecret}" />
    	<property name="mothed" value="$W{UMeng.mothed}" />
    </bean>
    
    <bean id="hsSdk" class="com.redfinger.manager.common.base.HsSdk">
		<property name="HS_SDK_URL" value="${hs.sdk.url}" />
		<property name="HS_SDK_CLIENTKEY" value="${hs.sdk.clientkey}" />
		<property name="HS_SDK_CLIENTID" value="${hs.sdk.clientid}" />
    	<property name="HS_SDK_APPID" value="${hs.sdk.appid}" />
    </bean>
    
    <bean id="filePathUtils" class="com.redfinger.manager.common.base.FilePathUtils">
	    <property name="imageUrl" value="${config.image.url}"/>  
	    <property name="imageLinkUrl" value="${config.image.link.url}"/>
	    <property name="gcUrl" value="${config.gc.url}"/>
	    <property name="configDownloadUrl" value="${config.download.url}"/>
	    <property name="configDownloadLinkUrl" value="${config.download.link.url}"/>
	    <property name="filePath" value="${config.file.path}"/>
	    <property name="fileLinkUrl" value="${config.file.link.url}"/>
	</bean>

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.redfinger.manager.common.domain" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.redfinger.manager.common.mapper" />
	</bean>
	<!-- 事务管理器 基于jdbc，ibatis，mybaits的spring事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	 
	<bean id="fileUtil" class="com.redfinger.manager.common.utils.FileUtils"></bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<context:annotation-config />
	<task:annotation-driven /> 
	<aop:aspectj-autoproxy/>
	
	 <!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 控制一个pool可分配多少个jedis实例 -->  
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例   -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException   -->
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的  -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	<!-- redis服务封装 -->
	<bean id="redisService" class="com.redfinger.manager.common.redis.impl.RedisServiceImpl">
		<property name="redisTemplate" ref="redisTemplate"/>
	</bean>
	
	<!-- redis 缓存类 -->
	<bean id="cacheRedisService" class="com.redfinger.manager.common.redis.impl.CacheRedisServiceImpl">
		<property name="redisService" ref="redisService"/>
	</bean>
	
	<import resource="spring-jms.xml"/>
	<!-- <import resource="spring-job.xml"/> -->
	
	
	<!-- 配置第二个数据源 -->
	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc2.url}" />
		<property name="username" value="${jdbc2.username}" />
		<property name="password" value="${jdbc2.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<property name="typeAliasesPackage" value="com.redfinger.manager.common.gather.domain" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2" />
		<property name="basePackage" value="com.redfinger.manager.common.gather.mapper" />
	</bean>
	
	<!-- 事务管理器 基于jdbc，ibatis，mybaits的spring事务管理 -->
	<bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource2" />
		<qualifier value="secondSource"/>
	</bean>

</beans>